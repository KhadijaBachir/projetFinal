import React, { useState, useEffect } from "react";
import { Container, Row, Col, Card, Button, Alert } from "react-bootstrap";
import { FaTrophy, FaMedal, FaGift, FaStar, FaCrown, FaPalette, FaRocket, FaChartLine, FaKey, FaClock, FaMagic, FaSmile, FaFire, FaAward, FaBolt, FaDumbbell, FaCertificate } from "react-icons/fa";
import { db, doc, getDoc, setDoc, onSnapshot, updateUserPoints, addUserReward } from "../firebaseConfig"; // Importez les fonctions n√©cessaires
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import Confetti from "react-confetti";
import "bootstrap/dist/css/bootstrap.min.css";
import "animate.css";

const messagesMotivants = [
  "Bravo ! Chaque d√©fi te rapproche de ton objectif ! üöÄ",
  "Tu es incroyable ! Continue sur cette lanc√©e ! üí™",
  "Un pas de plus vers la victoire ! üéØ",
  "Les l√©gendes ne s'arr√™tent jamais ! üèÜ",
  "Ta pers√©v√©rance est exemplaire ! üî•",
  "Chaque d√©fi accompli est une victoire sur toi-m√™me ! üëè",
  "Ne l√¢che rien, tu es sur la bonne voie ! üåü",
  "La r√©ussite est au bout du chemin, continue ! üèÖ"
];

const Recompenses = () => {
  const [userPoints, setUserPoints] = useState(0);
  const [showConfetti, setShowConfetti] = useState(false);
  const [messageMotivant, setMessageMotivant] = useState("");
  const [showVideo, setShowVideo] = useState(false);
  const [recompensesGagnees, setRecompensesGagnees] = useState([]);

  const userId = "user-id"; // Remplace par l'ID de l'utilisateur connect√©

  const recompensesParNiveau = {
    "D√©butant (1-5)": [
      { id: 1, title: "Badge 'Nouveau Challenger'", pointsRequired: 100, icon: <FaCertificate size={50} className="text-primary" /> },
      { id: 2, title: "Autocollant de Bienvenue üéâ", pointsRequired: 150, icon: <FaSmile size={50} className="text-warning" /> },
      { id: 3, title: "D√©fi D√©bloqu√©", pointsRequired: 50, icon: <FaGift size={50} className="text-success" /> },
      { id: 4, title: "Effet de Confettis üéá", pointsRequired: 50, icon: <FaMagic size={50} className="text-danger" /> }
    ],
    "Interm√©diaire (6-10)": [
      { id: 5, title: "M√©daille d'Or", pointsRequired: 200, icon: <FaMedal size={50} className="text-warning" /> },
      { id: 6, title: "Badge 'D√©fi Accept√©'", pointsRequired: 300, icon: <FaAward size={50} className="text-info" /> },
      { id: 7, title: "Champion du Jour", pointsRequired: 350, icon: <FaTrophy size={50} className="text-danger" /> },
      { id: 8, title: "D√©fi Surprise üî•", pointsRequired: 250, icon: <FaBolt size={50} className="text-warning" /> },
      { id: 9, title: "Temps Suppl√©mentaire ‚è≥", pointsRequired: 350, icon: <FaClock size={50} className="text-primary" /> }
    ],
    "Avanc√© (11-20)": [
      { id: 10, title: "Badge 'Expert des D√©fis'", pointsRequired: 700, icon: <FaAward size={50} className="text-success" /> },
      { id: 11, title: "Champion de la semaine", pointsRequired: 550, icon: <FaTrophy size={50} className="text-warning" /> },
      { id: 12, title: "D√©fi du mois", pointsRequired: 700, icon: <FaTrophy size={50} className="text-danger" /> },
      { id: 13, title: "Ma√Ætre du sport", pointsRequired: 800, icon: <FaDumbbell size={50} className="text-primary" /> },
      { id: 14, title: "Cl√© de D√©blocage üîë", pointsRequired: 600, icon: <FaKey size={50} className="text-dark" /> },
      { id: 15, title: "Autocollant 'Super H√©ros' ü¶∏‚Äç‚ôÇÔ∏è", pointsRequired: 350, icon: <FaStar size={50} className="text-warning" /> }
    ],
    "Ma√Ætre des D√©fis (21+)": [
      { id: 16, title: "Troph√©e 'L√©gende des D√©fis' üèÜ", pointsRequired: 1000, icon: <FaCrown size={50} className="text-warning" /> },
      { id: 17, title: "Classement des Champions üèÖ", pointsRequired: 900, icon: <FaChartLine size={50} className="text-success" /> },
      { id: 18, title: "Acc√®s √† un D√©fi Exclusif üöÄ", pointsRequired: 500, icon: <FaRocket size={50} className="text-info" /> },
      { id: 19, title: "Personnalisation du Profil üé®", pointsRequired: 400, icon: <FaPalette size={50} className="text-danger" /> }
    ]
  };

  // R√©cup√©rer les points et les r√©compenses de l'utilisateur depuis Firestore
  useEffect(() => {
    const fetchUserData = async () => {
      const userRef = doc(db, "users", userId);
      const userDoc = await getDoc(userRef);

      if (userDoc.exists()) {
        setUserPoints(userDoc.data().points || 0);
        setRecompensesGagnees(userDoc.data().rewards || []);
      } else {
        console.log("Aucun utilisateur trouv√© avec cet ID.");
      }
    };

    fetchUserData();

    // Ajouter un √©couteur pour les mises √† jour en temps r√©el
    const unsubscribe = onSnapshot(doc(db, "users", userId), (doc) => {
      if (doc.exists()) {
        setUserPoints(doc.data().points || 0);
        setRecompensesGagnees(doc.data().rewards || []);
      }
    });

    return () => unsubscribe(); // Nettoyer l'√©couteur
  }, [userId]);

  // Fonction pour d√©bloquer une r√©compense
  const unlockReward = async (reward) => {
    if (userPoints >= reward.pointsRequired) {
      const userRef = doc(db, "users", userId);
      const userDoc = await getDoc(userRef);
      const currentRewards = userDoc.data()?.rewards || [];

      // V√©rifie si la r√©compense est d√©j√† d√©bloqu√©e
      if (!currentRewards.some((r) => r.id === reward.id)) {
        const updatedRewards = [...currentRewards, reward];
        await addUserReward(userId, reward); // Utilisez la fonction addUserReward
        setRecompensesGagnees(updatedRewards); // Met √† jour l'√©tat local
        setShowConfetti(true);
        setMessageMotivant(messagesMotivants[Math.floor(Math.random() * messagesMotivants.length)]);
        setTimeout(() => setShowConfetti(false), 3000);
        setShowVideo(true); // Affiche la vid√©o apr√®s avoir d√©bloqu√© la r√©compense
        toast.success(`F√©licitations ! Vous avez d√©bloqu√© la r√©compense : ${reward.title}`, {
          position: "top-right",
          autoClose: 3000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
        });
      } else {
        toast.warning("Vous avez d√©j√† d√©bloqu√© cette r√©compense.", {
          position: "top-right",
          autoClose: 3000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
        });
      }
    } else {
      toast.error("Vous n'avez pas assez de points pour d√©bloquer cette r√©compense.", {
        position: "top-right",
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
      });
    }
  };

  return (
    <div style={{ backgroundColor: "#ff6f61", minHeight: "100vh", overflowX: "hidden", padding: "20px" }}>
      {showConfetti && <Confetti />}
      <Container>
        <h1 className="text-center mb-4" style={{ color: "#ffffff", fontWeight: "bold", fontSize: "2.5rem", textShadow: "2px 2px 4px rgba(0, 0, 0, 0.3)" }}>
          Mes R√©compenses
        </h1>

        {/* Section des points de l'utilisateur */}
        <Row className="justify-content-center">
          <Col md={6}>
            <Card className="text-center shadow-lg" style={{ background: "linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%)", border: "none", borderRadius: "15px" }}>
              <Card.Body>
                <FaTrophy size={50} color="#ffc107" />
                <h2 className="mt-3" style={{ color: "#343a40" }}>Points Accumul√©s</h2>
                <p className="display-4" style={{ color: "#343a40", fontWeight: "bold" }}>{userPoints}</p>
                <p style={{ color: "#343a40" }}>Utilisez vos points pour d√©bloquer des r√©compenses exclusives !</p>
              </Card.Body>
            </Card>
          </Col>
        </Row>

        {/* Section des r√©compenses disponibles */}
        {Object.entries(recompensesParNiveau).map(([niveau, recompenses], index) => (
          <div key={index} className="mt-5">
            <h3 className="text-success">{niveau}</h3>
            <div className="row">
              {recompenses.map((recompense, idx) => (
                <div key={idx} className="col-md-4 col-sm-6 mb-4">
                  <div className="card text-center shadow-lg p-3 border-0 rounded animate__animated animate__fadeInUp">
                    <div className="card-body">
                      <div className="mb-3">{recompense.icon}</div>
                      <h5 className="card-title text-dark">{recompense.title}</h5>
                      <p className="card-text text-muted">
                        Points requis : <strong>{recompense.pointsRequired}</strong>
                      </p>
                      <button
                        className="btn btn-outline-success"
                        onClick={() => unlockReward(recompense)}
                        disabled={userPoints < recompense.pointsRequired || recompensesGagnees.some(r => r.id === recompense.id)}
                      >
                        {recompensesGagnees.some(r => r.id === recompense.id) ? "D√©bloqu√©" : "Obtenir"}
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}

        {messageMotivant && (
          <div className="alert alert-success text-center mt-4 animate__animated animate__fadeInDown">
            <h5>{messageMotivant}</h5>
          </div>
        )}

        {showVideo && (
          <div className="mt-4 text-center">
            <h4>Vid√©o de Motivation</h4>
            <video width="80%" controls>
              <source src="URL_DE_TON_VIDEO" type="video/mp4" />
              Ton navigateur ne prend pas en charge la vid√©o.
            </video>
          </div>
        )}
      </Container>
      <ToastContainer />
    </div>
  );
};

export default Recompenses;
